    //モジュールはネストすることができる，ネストした内側のモジュールをサブモジュールと呼ぶ
    // ネストされたモジュールの要素を外部から使用する場合はサブモジュール全体をpublicにする
    // pub(super)とすると，親モジュールからのみアクセス可能になる


// モジュールをmod::でインポートする場合，ファイルの中はいきなりサブモジュールに相当するものから書き始めて良い

pub mod submodule1;
mod submodule2;

// pub mod sub_module1 {
//     pub fn test_fn1(){
//         println!("Hello world1");
//     }
//     fn test_fn2() {
//         println!("Hello rust1");
//     }
// }
// mod sub_module2 {
//     pub fn test_fn1() {
//         println!("Hello world2");
//     }
//     fn test_fn2() {
//         println!("Hello rust2");
//     }
// }


//モジュールの要素を指定するにはパスの指定が必要．絶対パス（クレートの名前）または相対パス（現在のモジュールから始まる）
//モジュールのパスの区切りには;;が使われる
//使いたいモジュールの要素をインポートすることで局所的なエイリアスがセク祭される
//要素を含むモジュール，トレイトをインポートして，要素には相対パスでアクセスするのが良い．